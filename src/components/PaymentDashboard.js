import React, { useState } from 'react';
import './PaymentDashboard.css';

const PaymentDashboard = ({ orderData, onGoBack, onPaymentComplete }) => {
  const [paymentMethod, setPaymentMethod] = useState('bkash');
  const [paymentDetails, setPaymentDetails] = useState({
    mobileNumber: '',
    accountNumber: '',
    transactionId: '',
    password: '',
    cvv: '',
    expiryDate: '',
    cardNumber: ''
  });
  const [processing, setProcessing] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);

  const paymentMethods = [
    { id: 'bkash', name: '‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂ (bKash)', icon: 'üì±', color: '#e2136e' },
    { id: 'rocket', name: '‡¶∞‡¶ï‡ßá‡¶ü (Rocket)', icon: 'üöÄ', color: '#8e44ad' },
    { id: 'nagad', name: '‡¶®‡¶ó‡¶¶ (Nagad)', icon: 'üí≥', color: '#f39c12' },
    { id: 'bank', name: '‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞', icon: 'üè¶', color: '#2980b9' },
    { id: 'card', name: '‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü/‡¶°‡ßá‡¶¨‡¶ø‡¶ü ‡¶ï‡¶æ‡¶∞‡ßç‡¶°', icon: 'üí≥', color: '#27ae60' },
    { id: 'cod', name: '‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶® ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø', icon: 'üí∞', color: '#16a085' }
  ];

  const handlePaymentDetailsChange = (field, value) => {
    setPaymentDetails(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handlePayment = () => {
    setProcessing(true);
    
    // Simulate payment processing
    setTimeout(() => {
      setProcessing(false);
      setShowConfirmation(true);
      
      // Auto proceed to confirmation after 3 seconds
      setTimeout(() => {
        const paymentInfo = {
          method: paymentMethod,
          transactionId: `TXN${Date.now()}`,
          timestamp: new Date().toISOString(),
          details: paymentDetails
        };
        onPaymentComplete(paymentInfo);
      }, 3000);
    }, 2000);
  };

  const renderPaymentForm = () => {
    switch(paymentMethod) {
      case 'bkash':
      case 'rocket':
      case 'nagad':
        return (
          <div className="payment-form mobile-banking">
            <div className="form-group">
              <label>‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
              <input
                type="tel"
                placeholder="01XXXXXXXXX"
                value={paymentDetails.mobileNumber}
                onChange={(e) => handlePaymentDetailsChange('mobileNumber', e.target.value)}
                required
              />
            </div>
            <div className="form-group">
              <label>‡¶™‡¶ø‡¶®/‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</label>
              <input
                type="password"
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶ø‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞"
                value={paymentDetails.password}
                onChange={(e) => handlePaymentDetailsChange('password', e.target.value)}
                required
              />
            </div>
          </div>
        );
      
      case 'bank':
        return (
          <div className="payment-form bank-transfer">
            <div className="form-group">
              <label>‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
              <input
                type="text"
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞"
                value={paymentDetails.accountNumber}
                onChange={(e) => handlePaymentDetailsChange('accountNumber', e.target.value)}
                required
              />
            </div>
            <div className="form-group">
              <label>‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</label>
              <input
                type="password"
                placeholder="‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°"
                value={paymentDetails.password}
                onChange={(e) => handlePaymentDetailsChange('password', e.target.value)}
                required
              />
            </div>
          </div>
        );
      
      case 'card':
        return (
          <div className="payment-form card-payment">
            <div className="form-group">
              <label>‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
              <input
                type="text"
                placeholder="XXXX XXXX XXXX XXXX"
                value={paymentDetails.cardNumber}
                onChange={(e) => handlePaymentDetailsChange('cardNumber', e.target.value)}
                required
              />
            </div>
            <div className="form-row">
              <div className="form-group">
                <label>‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑</label>
                <input
                  type="text"
                  placeholder="MM/YY"
                  value={paymentDetails.expiryDate}
                  onChange={(e) => handlePaymentDetailsChange('expiryDate', e.target.value)}
                  required
                />
              </div>
              <div className="form-group">
                <label>CVV</label>
                <input
                  type="text"
                  placeholder="XXX"
                  value={paymentDetails.cvv}
                  onChange={(e) => handlePaymentDetailsChange('cvv', e.target.value)}
                  required
                />
              </div>
            </div>
          </div>
        );
      
      case 'cod':
        return (
          <div className="payment-form cod-info">
            <div className="cod-note">
              <h4>‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶® ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø</h4>
              <p>‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ó‡¶¶ ‡¶Ö‡¶∞‡ßç‡¶• ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®‡•§</p>
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  if (showConfirmation) {
    return (
      <div className="payment-dashboard">
        <div className="payment-confirmation">
          <div className="confirmation-icon">‚úÖ</div>
          <h2>‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!</h2>
          <p>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>
          <div className="loading-spinner"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="payment-dashboard">
      <div className="payment-header">
        <button className="back-btn" onClick={onGoBack}>
          ‚Üê ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
        </button>
        <h1>‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®</h1>
        <p className="subtitle">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
      </div>

      <div className="payment-content">
        {/* Order Summary */}
        <div className="payment-order-summary">
          <h3>‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂</h3>
          <div className="summary-card">
            <div className="shop-info">
              <h4>{orderData.shop.name}</h4>
              <p>{orderData.shop.address}</p>
            </div>
            
            <div className="medicines-summary">
              {orderData.medicines.map((med, index) => (
                <div key={index} className="medicine-summary-item">
                  <span className="med-name">{med.name}</span>
                  <span className="med-quantity">Qty: {med.quantity}</span>
                  <span className="med-price">‡ß≥{med.totalPrice}</span>
                </div>
              ))}
            </div>
            
            <div className="total-summary">
              <div className="summary-row">
                <span>‡¶Æ‡ßã‡¶ü ‡¶¶‡¶æ‡¶Æ:</span>
                <span>‡ß≥{orderData.subtotal}</span>
              </div>
              <div className="summary-row">
                <span>‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú:</span>
                <span>‡ß≥{orderData.deliveryCharge}</span>
              </div>
              <div className="summary-row total">
                <span>‡¶∏‡¶∞‡ßç‡¶¨‡¶Æ‡ßã‡¶ü:</span>
                <span>‡ß≥{orderData.total}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Payment Methods */}
        <div className="payment-methods-section">
          <h3>‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</h3>
          <div className="payment-methods">
            {paymentMethods.map(method => (
              <div 
                key={method.id}
                className={`payment-method ${paymentMethod === method.id ? 'selected' : ''}`}
                onClick={() => setPaymentMethod(method.id)}
                style={{ borderColor: paymentMethod === method.id ? method.color : '#e9ecef' }}
              >
                <div className="method-icon" style={{ color: method.color }}>
                  {method.icon}
                </div>
                <span className="method-name">{method.name}</span>
                {paymentMethod === method.id && (
                  <div className="selected-indicator">‚úì</div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Payment Form */}
        <div className="payment-form-section">
          <h3>‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø</h3>
          {renderPaymentForm()}
        </div>

        {/* Payment Actions */}
        <div className="payment-actions">
          <button 
            className="pay-now-btn"
            onClick={handlePayment}
            disabled={processing}
          >
            {processing ? (
              <>
                <div className="spinner"></div>
                ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£...
              </>
            ) : (
              `‡ß≥${orderData.total} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®`
            )}
          </button>
          
          <div className="security-info">
            <p>üîí ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶ì ‡¶è‡¶®‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá‡¶°</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentDashboard;
