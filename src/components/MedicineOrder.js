import React, { useState } from 'react';
import './MedicineOrder.css';

function MedicineOrder({ prescription, language = 'bn', onClose, onOrderComplete }) {
  const t = {
    bn: {
      title: '‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
      subtitle: '‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ò‡¶∞‡ßá ‡¶¨‡¶∏‡ßá ‡¶™‡ßá‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®',
      prescriptionInfo: '‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶§‡¶•‡ßç‡¶Ø',
      medicineList: '‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ',
      deliveryInfo: '‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶§‡¶•‡ßç‡¶Ø',
      name: '‡¶®‡¶æ‡¶Æ',
      phone: '‡¶´‡ßã‡¶®',
      address: '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ',
      urgentDelivery: '‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø (‡ß®‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ)',
      normalDelivery: '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø (‡ß®-‡ß© ‡¶¶‡¶ø‡¶®)',
      paymentMethod: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø',
      cashOnDelivery: '‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü',
      bkash: '‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂',
      nagad: '‡¶®‡¶ó‡¶¶',
      total: '‡¶Æ‡ßã‡¶ü',
      deliveryCharge: '‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú',
      grandTotal: '‡¶∏‡¶∞‡ßç‡¶¨‡¶Æ‡ßã‡¶ü',
      placeOrder: '‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
      cancel: '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤',
      orderPlacing: '‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...',
      pharmacies: '‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∏‡¶ø',
      selectPharmacy: '‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∏‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
      inStock: '‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶Ü‡¶õ‡ßá',
      outOfStock: '‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶®‡ßá‡¶á',
      quantity: '‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£',
      price: '‡¶¶‡¶æ‡¶Æ',
      available: '‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá'
    },
    en: {
      title: 'Order Medicine',
      subtitle: 'Order medicine online and get it delivered to your home',
      prescriptionInfo: 'Prescription Info',
      medicineList: 'Medicine List',
      deliveryInfo: 'Delivery Info',
      name: 'Name',
      phone: 'Phone',
      address: 'Address',
      urgentDelivery: 'Urgent Delivery (24 hours)',
      normalDelivery: 'Normal Delivery (2-3 days)',
      paymentMethod: 'Payment Method',
      cashOnDelivery: 'Cash on Delivery',
      bkash: 'bKash',
      nagad: 'Nagad',
      total: 'Total',
      deliveryCharge: 'Delivery Charge',
      grandTotal: 'Grand Total',
      placeOrder: 'Place Order',
      cancel: 'Cancel',
      orderPlacing: 'Placing order...',
      pharmacies: 'Pharmacies',
      selectPharmacy: 'Select Pharmacy',
      inStock: 'In Stock',
      outOfStock: 'Out of Stock',
      quantity: 'Quantity',
      price: 'Price',
      available: 'Available'
    }
  }[language];

  // Mock pharmacy data
  const pharmacies = [
    { id: 1, name: '‡¶≤‡¶æ‡¶ú‡ßÅ‡¶ï ‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∏‡¶ø', location: '‡¶¢‡¶æ‡¶ï‡¶æ', rating: 4.8, deliveryTime: '‡ß®-‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ' },
    { id: 2, name: '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∏‡¶ø', location: '‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ', rating: 4.6, deliveryTime: '‡ßß-‡ß® ‡¶¶‡¶ø‡¶®' },
    { id: 3, name: '‡¶ï‡ßÉ‡¶∑‡¶ï ‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∏‡¶ø', location: '‡¶∏‡¶ø‡¶≤‡ßá‡¶ü', rating: 4.9, deliveryTime: '‡ß©-‡ß¨ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ' }
  ];

  // Mock medicine prices and availability
  const getMedicinePrice = (medicineName) => {
    const prices = {
      'Streptomycin': 120,
      'Copper Sulfate': 80,
      'Bordeaux Mixture': 95,
      'Mancozeb': 150,
      'Carbendazim': 180,
      'Imidacloprid': 200,
      'Thiamethoxam': 250
    };
    // If exact match not found, generate random price between 50-300
    return prices[medicineName] || (50 + Math.floor(Math.random() * 250));
  };

  const [selectedPharmacy, setSelectedPharmacy] = useState(null);
  const [deliveryType, setDeliveryType] = useState('normal');
  const [paymentMethod, setPaymentMethod] = useState('cod');
  const [deliveryInfo, setDeliveryInfo] = useState({
    name: '',
    phone: '',
    address: ''
  });
  const [medicineQuantities, setMedicineQuantities] = useState({});
  const [ordering, setOrdering] = useState(false);

  // Load farmer profile for delivery info
  React.useEffect(() => {
    const profile = JSON.parse(localStorage.getItem('farmerProfile') || '{}');
    setDeliveryInfo({
      name: profile.name || '',
      phone: profile.phone || '',
      address: profile.address || ''
    });
    
    // Initialize quantities to 1 for each medicine
    const quantities = {};
    prescription.medicines.forEach((med, idx) => {
      quantities[idx] = 1;
    });
    setMedicineQuantities(quantities);
  }, [prescription]);

  const calculateTotal = () => {
    let total = 0;
    prescription.medicines.forEach((med, idx) => {
      const price = getMedicinePrice(med.name);
      const quantity = medicineQuantities[idx] || 1;
      total += price * quantity;
    });
    return total;
  };

  const getDeliveryCharge = () => {
    if (deliveryType === 'urgent') return 100;
    return selectedPharmacy?.location === '‡¶¢‡¶æ‡¶ï‡¶æ' ? 50 : 80;
  };

  const handleQuantityChange = (index, quantity) => {
    setMedicineQuantities(prev => ({
      ...prev,
      [index]: Math.max(1, parseInt(quantity) || 1)
    }));
  };

  const handlePlaceOrder = async () => {
    if (!selectedPharmacy) {
      alert(language === 'bn' ? '‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∏‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®' : 'Please select a pharmacy');
      return;
    }
    
    setOrdering(true);
    
    // Simulate API call
    setTimeout(() => {
      const orderData = {
        orderId: `ORD-${Date.now()}`,
        prescriptionNo: prescription.prescriptionNo,
        pharmacy: selectedPharmacy,
        medicines: prescription.medicines.map((med, idx) => ({
          ...med,
          quantity: medicineQuantities[idx] || 1,
          price: getMedicinePrice(med.name),
          total: (medicineQuantities[idx] || 1) * getMedicinePrice(med.name)
        })),
        deliveryInfo,
        deliveryType,
        paymentMethod,
        subtotal: calculateTotal(),
        deliveryCharge: getDeliveryCharge(),
        grandTotal: calculateTotal() + getDeliveryCharge(),
        orderDate: new Date().toISOString(),
        status: 'confirmed',
        estimatedDelivery: deliveryType === 'urgent' 
          ? new Date(Date.now() + 24*60*60*1000).toISOString().slice(0,10)
          : new Date(Date.now() + 3*24*60*60*1000).toISOString().slice(0,10)
      };

      // Save to localStorage
      const orders = JSON.parse(localStorage.getItem('medicineOrders') || '[]');
      orders.unshift(orderData);
      localStorage.setItem('medicineOrders', JSON.stringify(orders));

      // Add notification
      const notifications = JSON.parse(localStorage.getItem('farmerNotifications') || '[]');
      notifications.unshift({
        id: Date.now(),
        type: 'medicine_order',
        title: language === 'bn' ? '‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§' : 'Medicine Order Confirmed',
        content: language === 'bn' 
          ? `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ID: ${orderData.orderId} - ${orderData.estimatedDelivery} ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶π‡¶¨‡ßá`
          : `Order ID: ${orderData.orderId} - Delivery on ${orderData.estimatedDelivery}`,
        timestamp: new Date().toISOString(),
        isRead: false,
        orderId: orderData.orderId
      });
      localStorage.setItem('farmerNotifications', JSON.stringify(notifications));

      setOrdering(false);
      onOrderComplete && onOrderComplete(orderData);
      onClose();
    }, 2000);
  };

  return (
    <div className="medicine-order-modal">
      <div className="medicine-order-container">
        <div className="order-header">
          <h2>üíä {t.title}</h2>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>

        <div className="order-content">
          <p className="order-subtitle">{t.subtitle}</p>

          {/* Prescription Info */}
          <div className="section">
            <h3>üìã {t.prescriptionInfo}</h3>
            <div className="prescription-summary">
              <div><strong>‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡¶Ç:</strong> {prescription.prescriptionNo}</div>
              <div><strong>‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞:</strong> {prescription.doctorName}</div>
              <div><strong>‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ:</strong> {prescription.date}</div>
            </div>
          </div>

          {/* Pharmacy Selection */}
          <div className="section">
            <h3>üè™ {t.selectPharmacy}</h3>
            <div className="pharmacy-grid">
              {pharmacies.map(pharmacy => (
                <div 
                  key={pharmacy.id} 
                  className={`pharmacy-card ${selectedPharmacy?.id === pharmacy.id ? 'selected' : ''}`}
                  onClick={() => setSelectedPharmacy(pharmacy)}
                >
                  <div className="pharmacy-name">üè™ {pharmacy.name}</div>
                  <div className="pharmacy-location">üìç {pharmacy.location}</div>
                  <div className="pharmacy-rating">‚≠ê {pharmacy.rating}</div>
                  <div className="pharmacy-delivery">üöö {pharmacy.deliveryTime}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Medicine List */}
          <div className="section">
            <h3>üíä {t.medicineList}</h3>
            <div className="medicine-order-list">
              {prescription.medicines.map((med, idx) => {
                const price = getMedicinePrice(med.name);
                const quantity = medicineQuantities[idx] || 1;
                return (
                  <div key={idx} className="medicine-order-item">
                    <div className="medicine-info">
                      <div className="medicine-name">üíä {med.name}</div>
                      <div className="medicine-dosage">‚è∞ {med.dosage}</div>
                      <div className="medicine-duration">üìÖ {med.duration}</div>
                    </div>
                    <div className="medicine-order-controls">
                      <div className="quantity-control">
                        <label>{t.quantity}:</label>
                        <input 
                          type="number" 
                          min="1" 
                          value={quantity}
                          onChange={(e) => handleQuantityChange(idx, e.target.value)}
                        />
                      </div>
                      <div className="price-info">
                        <div className="unit-price">‡ß≥{price} {language === 'bn' ? '‡¶™‡ßç‡¶∞‡¶§‡¶ø' : 'each'}</div>
                        <div className="total-price"><strong>‡ß≥{price * quantity}</strong></div>
                      </div>
                      <div className="availability">
                        <span className="in-stock">‚úÖ {t.available}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Delivery Info */}
          <div className="section">
            <h3>üöö {t.deliveryInfo}</h3>
            <div className="delivery-form">
              <div className="form-row">
                <label>{t.name}:</label>
                <input 
                  type="text" 
                  value={deliveryInfo.name}
                  onChange={(e) => setDeliveryInfo(prev => ({...prev, name: e.target.value}))}
                />
              </div>
              <div className="form-row">
                <label>{t.phone}:</label>
                <input 
                  type="text" 
                  value={deliveryInfo.phone}
                  onChange={(e) => setDeliveryInfo(prev => ({...prev, phone: e.target.value}))}
                />
              </div>
              <div className="form-row">
                <label>{t.address}:</label>
                <textarea 
                  value={deliveryInfo.address}
                  onChange={(e) => setDeliveryInfo(prev => ({...prev, address: e.target.value}))}
                  rows="2"
                />
              </div>
            </div>

            <div className="delivery-options">
              <label className="radio-option">
                <input 
                  type="radio" 
                  name="delivery" 
                  value="normal" 
                  checked={deliveryType === 'normal'}
                  onChange={(e) => setDeliveryType(e.target.value)}
                />
                üöö {t.normalDelivery} - ‡ß≥{selectedPharmacy?.location === '‡¶¢‡¶æ‡¶ï‡¶æ' ? '50' : '80'}
              </label>
              <label className="radio-option">
                <input 
                  type="radio" 
                  name="delivery" 
                  value="urgent" 
                  checked={deliveryType === 'urgent'}
                  onChange={(e) => setDeliveryType(e.target.value)}
                />
                üèÉ {t.urgentDelivery} - ‡ß≥100
              </label>
            </div>
          </div>

          {/* Payment Method */}
          <div className="section">
            <h3>üí≥ {t.paymentMethod}</h3>
            <div className="payment-options">
              <label className="radio-option">
                <input 
                  type="radio" 
                  name="payment" 
                  value="cod" 
                  checked={paymentMethod === 'cod'}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />
                üíµ {t.cashOnDelivery}
              </label>
              <label className="radio-option">
                <input 
                  type="radio" 
                  name="payment" 
                  value="bkash" 
                  checked={paymentMethod === 'bkash'}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />
                üì± {t.bkash}
              </label>
              <label className="radio-option">
                <input 
                  type="radio" 
                  name="payment" 
                  value="nagad" 
                  checked={paymentMethod === 'nagad'}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />
                üì± {t.nagad}
              </label>
            </div>
          </div>

          {/* Order Summary */}
          <div className="section order-summary">
            <h3>üí∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶∞‡¶ø</h3>
            <div className="summary-row">
              <span>{t.total}:</span>
              <span>‡ß≥{calculateTotal()}</span>
            </div>
            <div className="summary-row">
              <span>{t.deliveryCharge}:</span>
              <span>‡ß≥{getDeliveryCharge()}</span>
            </div>
            <div className="summary-row total">
              <span><strong>{t.grandTotal}:</strong></span>
              <span><strong>‡ß≥{calculateTotal() + getDeliveryCharge()}</strong></span>
            </div>
          </div>
        </div>

        <div className="order-actions">
          <button 
            className="order-btn"
            onClick={handlePlaceOrder}
            disabled={ordering || !selectedPharmacy}
          >
            {ordering ? (
              <>‚è≥ {t.orderPlacing}</>
            ) : (
              <>üõí {t.placeOrder}</>
            )}
          </button>
          <button className="cancel-btn" onClick={onClose}>
            {t.cancel}
          </button>
        </div>
      </div>
    </div>
  );
}

export default MedicineOrder;
